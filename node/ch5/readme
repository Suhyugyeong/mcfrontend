package.json 초기화
>npm init
=>package.json 자동으로 만들어지고, 거의 대부분 기본값으로 만들어도 상관없음
=>json파일이니까 이후 얼마든지 수정 가능한..

>npm run test
=>npm run xxx : xxx는 명렁어로 package.json(scripts)에 등록된 명령어
=>개발하다가 터미널 창에서 자주 쓰는 명령어를 scripts에 등록하고 npm run xxx 로 실행하셈

//모듈 다운로드..
>npm install express
다운로드된 곳은 명령어를 입력한 폴더에 node_modules가 생기고 그 안에 다운로드
ch5/node_modules - node_modules의 모듈은 ch5 폴더부터 그 하위 모든 폴더에서 이용 가능
단, ch5 외부 폴더에서는 이용할 수 없다
하나의 모듈만 download(express), node_modules에는 express와 종속성을 가지는 많은 모듈이 같이 설치될 수 있다..

>npm install xxx 로 다운로드된 모듈은 package.json에도 기록된다.. package.json 파일 가보면 써있음

//다운로드 받은 모듈 삭제하기
>npm unistall express

//모듈 설치 시 아래처럼..
>npm i express
>npm uninstall express

ch5/node_modules 에 설치되었다면 ch5 외부 폴더에서는 이 모듈을 사용할 수 없는데..
만약 컴퓨터 전체 폴더에서 사용해야 하는 모듈이 있다면 글로벌로 설치하는 방법이 있다!
>npm i -g express
-g 옵션을 주고 설치하면 ch5/node_modules 에 설치되는 것이 아니라, 
C:\Users\USER\AppData\Roaming\npm\node_modules 여기에 설치돼서 모든 폴더에서 이용가능..

가끔 여러곳에서 사용할 모듈을 -g로 글로벌 설치를 하기는 하지만,
요즘에는 권장하지 않는다...
버전 차이가 있을 수 있기 때문에..
그러니까, 다시 삭제해야 해요
>npm uninstall -g express4

개발하다보면 npm으로 워낙 많은 모듈을 설치한다.
여러 모듈을 한꺼번에 설치도 가능한..
>npm i express cookie-parser
스페이스로 구분해서.. 여러개 나열하면 됨

모듈은 모듈이지만, 개발시에만 필요한(실행시 필요없는) 툴적인 모듈이 있다..
>npm i -D nodemon
-D 옵션을 주고 모듈을 설치하면 package.json에 다르게 들어가는 것을 확인할 수 있다

package.json을 열어보면 이 프로젝트에서 어떤 모듈을 사용하고 있는지 확인 가능한!




-----------------------------------------------------------------------------------

10명이 프로젝트를 한다.. 
모두 express 모듈이 필요하다고 가정하자.. 
10명이 개별적으로 자신의 컴퓨터에서 프로젝트를 따로 구성하고 다운로드 받고.. 귀찮다..
신입사원이 들어왔다.. 
환경 잡아줘야 한다.. 
그때 express 를 다운로드 받으면 선배들 컴퓨터에 다운로드된 express 와 버전이 달라서..
문제가 생기는 등등등.. 

프로젝트 팀원들의 환경을 통일.. 
선임 개발자가 package.json 을 만들고.. 이 package.json 을 공유해서.. package.json 에
있는데로.. 프로젝트 환경이 만들어지게.. 

package.json 이 있는 폴더에서
>npm install 
